

Prerequisites
=============

You will need SCons (http://www.scons.org) which is used instead of
make/automake as the build system.

You will need some basic C++ Boost libraries (http://www.boost.org), which are
an extension of the C++ STL. You will need version 1.41 or newer. The libraries
might be part of your favorite Linux distribution, or you can download and
compile them yourself.

For some example building blocks, the crypto++ library is need (libcrypto++).

For running the Node Architecture inside the OMNeT++ Simulator, you need to
install OMNeT++ and add its bin-directory to your $PATH variable. SCons SHOULD
then be able to find OMNeT++. If you are not familiar with OMNeT++, try out its
tictoc tutorial first.

On FreeBSD, most of the tools / libraries should be available via ports. The
current source version should compile and install without any problems.


Compiling
=========

First, build the daemon and the simple architecture by typing

  scons

To build the "real" Node Architecture Daemon for Linux/Windows, run the command

  scons boost

To build an OMNeT++ simulation with nodes running the Node Architecture Daemon
type

  scons omnet

To clean up the build files, type

  scons -c
  scons -c boost
  scons -c omnet

To every scons command you may add the parameter debug=1 in order to compile
everything with GDB debugging symbols. This will reduce performance but allows
comfortable debugging of your code using GDB.


Running
=======

For name/address resolution in Simple Architecture, the file "resolver.conf"
must be present in the current working directory. An example of such a file
can be found in src/targets/omnetpp. The easiest way is to link it into the
build directory, where the actual executable is to be found:

  cd build/targets/omnetpp   # or build/targets/boost respectively
  ln -s ../../../src/targets/omnetpp/resolver.conf

You'll find the executables in the build/targets/*/ directories. Remember that
you need two additional files in order to run the OMNeT++ simulations (namely
omnetpp.ini and a .ned file). You'll find examples in the src/targets/omnetpp/
directory. The easiest way is to link them into the build directory:

  cd build/targets/omnetpp
  ln -s ../../../src/targets/omnetpp/omnetpp.ini
  ln -s ../../../src/targets/omnetpp/two-nodes.ned

To run the OMNeT++ GUI run the following commands from the root directory of
the repository:

  cd build/targets/omnetpp
  ./omnet_na


Extra notes on running the daemon on real systems
=================================================

The current version for real systems is based on boost and uses a UDP socket
for communications via the network, and a local UNIX socket for communication
with local applications. A simple example for such an application can be found
in demoApps/nodeconnector. A more complex one with a graphical user interface
can be found in demoApps/camApp.

To run the daemon on Linux, simply type

  cd build/targets/boost
  ./nad --unlink boost_sock --vvv --name <local node name>

The first parameter ensures, that the local UNIX socket used to communicate
with external applications will be recreated when starting the daemon. The
second parameter defines the verbosity level (-v lowest, -vvvvv highest). The
third parameter specifies the local node name. There MUST be an entry in the 
resolver.conf file for this node name. For more details, type

  ./nad --help

The resolver.conf file MUST contain the special node name "node://broadcast",
and the address MUST specify the broadcast address of the local subnet used
for testing. Note, that the port number is mandatory (currently 50779).


Acknowledgments
===============

The following persons contributed actively to the code base of this package and
are listed in alphabetical order:

  Helge Backhaus, KIT, Karlsruhe, Germany
  Benjamin Behringer, KIT, Karlsruhe, Germany
  Gorka Hernando Garcia, ROBOTIKER-Tecnalia, Bilbao, Spain
  Denis Martin, KIT, Karlsruhe, Germany
  Hans Wippel, KIT, Karlsruhe, Germany

In addition, we would like to thank the following people for the conceptual
design (listed in alphabetical order):

  Ibitissam El Khayat, Ericsson, Aachen, Germany
  Christoph Werle, KIT, Karlsruhe, Germany
  Lars VÃ¶lker, KIT, Karlsruhe, Germany
  Martina Zitterbart, KIT, Karlsruhe, Germany

  ...and all the 4WARD (www.4ward-project.eu) people for interesting
  discussions and feedback!

--
2010-06-11 denis: Added acknowledgment section
2009-10-10 denis: Updated instructions for running the daemon version
2009-09-09 denis: Updated build instructions
2009-04-24 denis: Some updates
2009-01-16 denis: Initial version


